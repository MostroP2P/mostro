diff --git a/src/app/orders.rs b/src/app/orders.rs
index d72fd6f..50ed39b 100644
--- a/src/app/orders.rs
+++ b/src/app/orders.rs
@@ -60,8 +60,23 @@ mod tests {
     use nostr_sdk::{prelude::PublicKey, Keys, Kind as NostrKind, Timestamp, UnsignedEvent};
     use sqlx::sqlite::SqlitePoolOptions;
     use sqlx::SqlitePool;
+    use std::sync::Once;
     use uuid::Uuid;
 
+    static INIT: Once = Once::new();
+
+    fn init_settings_test() {
+        use crate::config::MOSTRO_CONFIG;
+        INIT.call_once(|| {
+            let config_tpl = include_bytes!("../../settings.tpl.toml");
+            let config_tpl =
+                std::str::from_utf8(config_tpl).expect("Invalid UTF-8 in template config file");
+            let test_settings: Settings =
+                toml::from_str(config_tpl).expect("Failed to parse template config file");
+            MOSTRO_CONFIG.get_or_init(|| test_settings);
+        });
+    }
+
     async fn setup_orders_pool() -> SqlitePool {
         let pool = SqlitePoolOptions::new()
             .max_connections(1)
@@ -144,6 +159,7 @@ mod tests {
 
     #[tokio::test]
     async fn test_orders_action_returns_matching_orders() {
+        init_settings_test();
         let pool = setup_orders_pool().await;
         clear_order_queue().await;
 
@@ -206,6 +222,7 @@ mod tests {
 
     #[tokio::test]
     async fn test_orders_action_rejects_invalid_payload() {
+        init_settings_test();
         let pool = setup_orders_pool().await;
         clear_order_queue().await;
 
@@ -241,6 +258,7 @@ mod tests {
 
     #[tokio::test]
     async fn test_orders_action_returns_not_found_for_missing_orders() {
+        init_settings_test();
         let pool = setup_orders_pool().await;
         clear_order_queue().await;
 
@@ -290,6 +308,7 @@ mod tests {
 
     #[tokio::test]
     async fn test_orders_action_rejects_empty_ids() {
+        init_settings_test();
         let pool = setup_orders_pool().await;
         clear_order_queue().await;
 
