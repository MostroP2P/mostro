# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "MostroP2P"
repo = "mostro"

[changelog]
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
## Verifying the Release
Use the published SHA256 checksums to verify your download.

1. Download the release artifact and its checksum file (e.g. `SHA256SUMS` or `checksums.txt`) from the release page.
2. Re-compute the SHA256 of your downloaded file and compare it to the value listed for the same filename in the checksum file.

Linux / macOS:
```bash
# macOS (shasum) or Linux (sha256sum)
shasum -a 256 mostro-vX.Y.Z-<target>.tar.gz
# or
sha256sum mostro-vX.Y.Z-<target>.tar.gz
```

Windows (PowerShell):
```powershell
Get-FileHash .\mostro-vX.Y.Z-<target>.zip -Algorithm SHA256
```

Ensure the computed hash matches exactly the one provided in the checksum file for that artifact name.

## What's Changed{%- if version %} in {{ version }}{%- endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
{% if group != "" %}
### {{ group }}
{% endif %}
{% for commit in commits %}
  {% if commit.remote.pr_title -%}
    {%- set commit_message = commit.remote.pr_title -%}
  {%- else -%}
    {%- set commit_message = commit.message -%}
  {%- endif -%}
  * {{ commit_message | split(pat="\n") | first | trim }}\
    {% if commit.remote.username %} by [@{{ commit.remote.username }}](https://github.com/{{ commit.remote.username }}){%- endif -%}
    {% if commit.remote.pr_number %} in \
      [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }}) \
    {%- endif %}
{%- endfor %}
{%- endfor -%}

{%- if github -%}
{% if github.contributors | length != 0 %}
  {% raw %}\n{% endraw -%}
  ## Contributors
{%- endif %}\
{% for contributor in github.contributors %}
  * [@{{ contributor.username }}](https://github.com/{{ contributor.username }}) made their contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif -%}

{% if version %}
    {% if previous.version %}
      **Full Changelog**: {{ self::remote_url() }}/compare/{{ previous.version }}...{{ version }}
    {% endif %}
{% else -%}
  {% raw %}\n{% endraw %}
{% endif %}

{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
<!-- generated by git-cliff -->
"""
# An array of regex based postprocessors to modify the changelog.
# Strip numeric HTML comment placeholders like '<!-- 123 -->' left by tooling.
postprocessors = [{ pattern = "<!-- \\d+ -->", replace = "" }]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat(\\(.+\\))?!?:", group = "🚀 Features" },
  { message = "^fix(\\(.+\\))?!?:", group = "🐛 Bug Fixes" },
  { message = "^merge(\\(.+\\))?!?:", group = "🔀 Merges" },
  { message = "^docs(\\(.+\\))?!?:", group = "📚 Documentation" },
  { message = "^perf(\\(.+\\))?!?:", group = "⚡ Performance" },
  { message = "^refactor(\\(.+\\))?!?:", group = "🚜 Refactor" },
  { message = "^style(\\(.+\\))?!?:", group = "🎨 Styling" },
  { message = "^test(\\(.+\\))?!?:", group = "🧪 Testing" },
  { message = "^ci(\\(.+\\))?!?:", group = "⚙️ CI/CD" },
  { message = "^build(\\(.+\\))?!?:", group = "🔨 Build" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore(\\(.+\\))?!?:", group = "⚙️ Miscellaneous Tasks" },
  { body = "(?i)security", group = "🛡️ Security" },
  { message = "^revert", group = "◀️ Revert" },
  { message = ".*", group = "💼 Other" },
]

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
  { pattern = 'Merge pull request #([0-9]+)', replace = "merge: pull request #$1" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "newest"
# Enable link parsing for PR references and user mentions
link_parsers = [
  { pattern = "Merge pull request #([0-9]+)", href = "https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/pull/$1" },
  { pattern = "#([0-9]+)", href = "https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/issues/$1" },
  { pattern = "@([a-zA-Z0-9_-]+(?:\\[[^\\]]+\\])?)", href = "https://github.com/$1" },
]
