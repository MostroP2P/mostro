name: Release on Tag

on:
  push:
    tags: ['v*']          # run only when a tag like v1.2.3 is pushed

env:
  CARGO_TERM_COLOR: always

jobs:
  # Generate changelog (runs once)
  changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      content: ${{ steps.changelog.outputs.content }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog
        uses: orhun/git-cliff-action@v4
        id: changelog
        with:
          config: cliff.toml
          args: --latest --strip header --output CHANGELOG.md
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REF: ${{ github.ref }}

  # Prepare matrix of targets from archs file
  matrix:
    runs-on: ubuntu-latest
    needs: changelog
    outputs:
      targets: ${{ steps.set-matrix.outputs.targets }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set-matrix
        name: Read targets from archs
        shell: bash
        run: |
          set -euo pipefail
          targets=$(grep -v '^\s*$' archs | jq -R -s -c 'split("\n") | map(select(length>0))')
          echo "targets=$targets" >> "$GITHUB_OUTPUT"

  # Build binaries for all targets using cross
  build:
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.matrix.outputs.targets) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Run tests
        run: cargo test --locked

      - name: Build release
        run: cross build --release --locked --target ${{ matrix.target }}

      - name: Prepare conventional artifact name
        shell: bash
        run: |
          set -euo pipefail
          outdir="artifacts"
          mkdir -p "$outdir"
          case "${{ matrix.target }}" in
            *-pc-windows-*) src="target/${{ matrix.target }}/release/mostrod.exe"; dst="$outdir/mostrod-${{ matrix.target }}.exe";;
            *)              src="target/${{ matrix.target }}/release/mostrod";     dst="$outdir/mostrod-${{ matrix.target }}";;
          esac
          cp "$src" "$dst"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.target }}
          path: artifacts

  # Create release with all artifacts
  release:
    runs-on: ubuntu-latest
    needs: [changelog, build]
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate checksums manifest
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          # Compute SHA256 for all produced binaries
          : > manifest.txt
          for f in artifact-*/mostrod*; do
            sha256sum "$f" >> manifest.txt
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ needs.changelog.outputs.content }}
          files: |
            artifact-*/mostrod*
            manifest.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
